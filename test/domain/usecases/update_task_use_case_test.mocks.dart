// Mocks generated by Mockito 5.4.0 from annotations
// in maids/test/domain/usecases/update_task_use_case_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:maids/data/models/page_data.dart' as _i3;
import 'package:maids/data/models/task.dart' as _i6;
import 'package:maids/data/remote/dto/basic_response.dart' as _i2;
import 'package:maids/domain/repositories/task_repository.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeBasicResponse_0 extends _i1.SmartFake implements _i2.BasicResponse {
  _FakeBasicResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePageData_1<T> extends _i1.SmartFake implements _i3.PageData<T> {
  _FakePageData_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TaskRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskRepository extends _i1.Mock implements _i4.TaskRepository {
  MockTaskRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.BasicResponse> createTask({required String? todo}) =>
      (super.noSuchMethod(
        Invocation.method(
          #createTask,
          [],
          {#todo: todo},
        ),
        returnValue: _i5.Future<_i2.BasicResponse>.value(_FakeBasicResponse_0(
          this,
          Invocation.method(
            #createTask,
            [],
            {#todo: todo},
          ),
        )),
      ) as _i5.Future<_i2.BasicResponse>);
  @override
  _i5.Future<_i2.BasicResponse> updateTask(
          {required _i6.TaskModel? taskModel}) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTask,
          [],
          {#taskModel: taskModel},
        ),
        returnValue: _i5.Future<_i2.BasicResponse>.value(_FakeBasicResponse_0(
          this,
          Invocation.method(
            #updateTask,
            [],
            {#taskModel: taskModel},
          ),
        )),
      ) as _i5.Future<_i2.BasicResponse>);
  @override
  _i5.Future<_i2.BasicResponse> deleteTask(
          {required _i6.TaskModel? taskModel}) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [],
          {#taskModel: taskModel},
        ),
        returnValue: _i5.Future<_i2.BasicResponse>.value(_FakeBasicResponse_0(
          this,
          Invocation.method(
            #deleteTask,
            [],
            {#taskModel: taskModel},
          ),
        )),
      ) as _i5.Future<_i2.BasicResponse>);
  @override
  _i5.Future<_i3.PageData<_i6.TaskModel>> getTasks({
    required int? skip,
    required int? limit,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTasks,
          [],
          {
            #skip: skip,
            #limit: limit,
          },
        ),
        returnValue: _i5.Future<_i3.PageData<_i6.TaskModel>>.value(
            _FakePageData_1<_i6.TaskModel>(
          this,
          Invocation.method(
            #getTasks,
            [],
            {
              #skip: skip,
              #limit: limit,
            },
          ),
        )),
      ) as _i5.Future<_i3.PageData<_i6.TaskModel>>);
}
