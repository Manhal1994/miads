// Mocks generated by Mockito 5.4.0 from annotations
// in maids/test/generated_test_dependency_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:maids/data/local/local_data_source.dart' as _i10;
import 'package:maids/data/models/page_data.dart' as _i4;
import 'package:maids/data/models/task.dart' as _i8;
import 'package:maids/data/remote/dto/basic_response.dart' as _i3;
import 'package:maids/data/remote/dto/login_response.dart' as _i2;
import 'package:maids/data/remote/remote_data_source.dart' as _i9;
import 'package:maids/domain/repositories/auth_repository.dart' as _i5;
import 'package:maids/domain/repositories/task_repository.dart' as _i7;
import 'package:maids/domain/usecases/login_use_case.dart' as _i11;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLoginResponse_0 extends _i1.SmartFake implements _i2.LoginResponse {
  _FakeLoginResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBasicResponse_1 extends _i1.SmartFake implements _i3.BasicResponse {
  _FakeBasicResponse_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePageData_2<T> extends _i1.SmartFake implements _i4.PageData<T> {
  _FakePageData_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i5.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.LoginResponse> login({
    required String? username,
    required String? pass,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [],
          {
            #username: username,
            #pass: pass,
          },
        ),
        returnValue: _i6.Future<_i2.LoginResponse>.value(_FakeLoginResponse_0(
          this,
          Invocation.method(
            #login,
            [],
            {
              #username: username,
              #pass: pass,
            },
          ),
        )),
      ) as _i6.Future<_i2.LoginResponse>);
}

/// A class which mocks [TaskRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskRepository extends _i1.Mock implements _i7.TaskRepository {
  MockTaskRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i3.BasicResponse> createTask({required String? todo}) =>
      (super.noSuchMethod(
        Invocation.method(
          #createTask,
          [],
          {#todo: todo},
        ),
        returnValue: _i6.Future<_i3.BasicResponse>.value(_FakeBasicResponse_1(
          this,
          Invocation.method(
            #createTask,
            [],
            {#todo: todo},
          ),
        )),
      ) as _i6.Future<_i3.BasicResponse>);
  @override
  _i6.Future<_i3.BasicResponse> updateTask(
          {required _i8.TaskModel? taskModel}) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTask,
          [],
          {#taskModel: taskModel},
        ),
        returnValue: _i6.Future<_i3.BasicResponse>.value(_FakeBasicResponse_1(
          this,
          Invocation.method(
            #updateTask,
            [],
            {#taskModel: taskModel},
          ),
        )),
      ) as _i6.Future<_i3.BasicResponse>);
  @override
  _i6.Future<_i3.BasicResponse> deleteTask(
          {required _i8.TaskModel? taskModel}) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [],
          {#taskModel: taskModel},
        ),
        returnValue: _i6.Future<_i3.BasicResponse>.value(_FakeBasicResponse_1(
          this,
          Invocation.method(
            #deleteTask,
            [],
            {#taskModel: taskModel},
          ),
        )),
      ) as _i6.Future<_i3.BasicResponse>);
  @override
  _i6.Future<_i4.PageData<_i8.TaskModel>> getTasks({
    required int? skip,
    required int? limit,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTasks,
          [],
          {
            #skip: skip,
            #limit: limit,
          },
        ),
        returnValue: _i6.Future<_i4.PageData<_i8.TaskModel>>.value(
            _FakePageData_2<_i8.TaskModel>(
          this,
          Invocation.method(
            #getTasks,
            [],
            {
              #skip: skip,
              #limit: limit,
            },
          ),
        )),
      ) as _i6.Future<_i4.PageData<_i8.TaskModel>>);
}

/// A class which mocks [RemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteDataSource extends _i1.Mock implements _i9.RemoteDataSource {
  MockRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<dynamic> get({
    required String? endpoint,
    String? token,
    dynamic params,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [],
          {
            #endpoint: endpoint,
            #token: token,
            #params: params,
          },
        ),
        returnValue: _i6.Future<dynamic>.value(),
      ) as _i6.Future<dynamic>);
  @override
  _i6.Future<dynamic> post({
    required String? endpoint,
    Map<String, dynamic>? data,
    dynamic params,
    String? token,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [],
          {
            #endpoint: endpoint,
            #data: data,
            #params: params,
            #token: token,
          },
        ),
        returnValue: _i6.Future<dynamic>.value(),
      ) as _i6.Future<dynamic>);
  @override
  _i6.Future<dynamic> put({
    required String? endpoint,
    dynamic data,
    dynamic params,
    String? token,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [],
          {
            #endpoint: endpoint,
            #data: data,
            #params: params,
            #token: token,
          },
        ),
        returnValue: _i6.Future<dynamic>.value(),
      ) as _i6.Future<dynamic>);
  @override
  _i6.Future<dynamic> delete({
    required String? endpoint,
    dynamic data,
    dynamic params,
    String? token,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
          {
            #endpoint: endpoint,
            #data: data,
            #params: params,
            #token: token,
          },
        ),
        returnValue: _i6.Future<dynamic>.value(),
      ) as _i6.Future<dynamic>);
}

/// A class which mocks [LocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalDataSource extends _i1.Mock implements _i10.LocalDataSource {
  MockLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<void> saveToken(String? token) => (super.noSuchMethod(
        Invocation.method(
          #saveToken,
          [token],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<List<_i8.TaskModel>> getTasks() => (super.noSuchMethod(
        Invocation.method(
          #getTasks,
          [],
        ),
        returnValue: _i6.Future<List<_i8.TaskModel>>.value(<_i8.TaskModel>[]),
      ) as _i6.Future<List<_i8.TaskModel>>);
  @override
  _i6.Future<List<_i8.TaskModel>> getMyTasks(bool? me) => (super.noSuchMethod(
        Invocation.method(
          #getMyTasks,
          [me],
        ),
        returnValue: _i6.Future<List<_i8.TaskModel>>.value(<_i8.TaskModel>[]),
      ) as _i6.Future<List<_i8.TaskModel>>);
  @override
  _i6.Future<void> insertTask(_i8.TaskModel? taskModel) => (super.noSuchMethod(
        Invocation.method(
          #insertTask,
          [taskModel],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> updateTask(_i8.TaskModel? taskModel) => (super.noSuchMethod(
        Invocation.method(
          #updateTask,
          [taskModel],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> deleteTask(_i8.TaskModel? taskModel) => (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [taskModel],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [LoginUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginUseCase extends _i1.Mock implements _i11.LoginUseCase {
  MockLoginUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.LoginResponse> call({
    required String? username,
    required String? pass,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {
            #username: username,
            #pass: pass,
          },
        ),
        returnValue: _i6.Future<_i2.LoginResponse>.value(_FakeLoginResponse_0(
          this,
          Invocation.method(
            #call,
            [],
            {
              #username: username,
              #pass: pass,
            },
          ),
        )),
      ) as _i6.Future<_i2.LoginResponse>);
}
